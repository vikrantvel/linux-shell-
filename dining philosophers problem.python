import threading
import time
import random

# Number of philosophers
NUM_PHILOSOPHERS = 5

# Semaphore for each fork
forks = [threading.Semaphore(1) for _ in range(NUM_PHILOSOPHERS)]

# A semaphore to limit the number of philosophers that can try to eat simultaneously
# This prevents deadlock by limiting resource contention.
room = threading.Semaphore(NUM_PHILOSOPHERS - 1)


def philosopher(id):
    while True:
        # Thinking
        print(f"Philosopher {id} is thinking.")
        time.sleep(random.uniform(1, 3))

        # Try to pick up forks
        print(f"Philosopher {id} is hungry.")

        # Enter the room (prevent deadlock)
        room.acquire()

        # Pick up left fork
        forks[id].acquire()
        print(f"Philosopher {id} picked up left fork.")

        # Pick up right fork
        forks[(id + 1) % NUM_PHILOSOPHERS].acquire()
        print(f"Philosopher {id} picked up right fork.")

        # Eating
        print(f"Philosopher {id} is eating.")
        time.sleep(random.uniform(1, 2))

        # Put down right fork
        forks[(id + 1) % NUM_PHILOSOPHERS].release()
        print(f"Philosopher {id} put down right fork.")

        # Put down left fork
        forks[id].release()
        print(f"Philosopher {id} put down left fork.")

        # Leave the room
        room.release()


# Create philosopher threads
threads = []
for i in range(NUM_PHILOSOPHERS):
    t = threading.Thread(target=philosopher, args=(i,))
    threads.append(t)
    t.start()

# Wait for all threads to finish (they won't in this example)
for t in threads:
    t.join()
